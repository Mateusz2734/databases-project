// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: reservations.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addReservation = `-- name: AddReservation :one
INSERT INTO reservations (flight_id, firstname, lastname, email, reservation_datetime)
VALUES ($1::int, $2, $3, $4, NOW())
RETURNING reservation_id, flight_id, firstname, lastname, email, reservation_datetime
`

type AddReservationParams struct {
	FlightID  int32  `json:"flight_id"`
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
	Email     string `json:"email"`
}

func (q *Queries) AddReservation(ctx context.Context, db DBTX, arg AddReservationParams) (Reservation, error) {
	row := db.QueryRow(ctx, addReservation,
		arg.FlightID,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
	)
	var i Reservation
	err := row.Scan(
		&i.ReservationID,
		&i.FlightID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.ReservationDatetime,
	)
	return i, err
}

const deleteReservation = `-- name: DeleteReservation :exec
DELETE FROM reservations WHERE reservation_id = $1::int
`

func (q *Queries) DeleteReservation(ctx context.Context, db DBTX, reservationID int32) error {
	_, err := db.Exec(ctx, deleteReservation, reservationID)
	return err
}

const getCustomerReservations = `-- name: GetCustomerReservations :many
SELECT reservations.reservation_id, reservations.flight_id, reservations.firstname, reservations.lastname, reservations.email, reservations.reservation_datetime, 
    flights.departure_airport, 
    flights.arrival_airport,
    flights.departure_datetime
FROM reservations
JOIN flights ON reservations.flight_id = flights.flight_id
WHERE email = $1 
AND $2 = firstname 
AND $3 = lastname
AND flights.departure_datetime > NOW()
`

type GetCustomerReservationsParams struct {
	Email     string `json:"email"`
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
}

type GetCustomerReservationsRow struct {
	Reservation       Reservation      `json:"reservation"`
	DepartureAirport  string           `json:"departure_airport"`
	ArrivalAirport    string           `json:"arrival_airport"`
	DepartureDatetime pgtype.Timestamp `json:"departure_datetime"`
}

func (q *Queries) GetCustomerReservations(ctx context.Context, db DBTX, arg GetCustomerReservationsParams) ([]GetCustomerReservationsRow, error) {
	rows, err := db.Query(ctx, getCustomerReservations, arg.Email, arg.Firstname, arg.Lastname)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCustomerReservationsRow
	for rows.Next() {
		var i GetCustomerReservationsRow
		if err := rows.Scan(
			&i.Reservation.ReservationID,
			&i.Reservation.FlightID,
			&i.Reservation.Firstname,
			&i.Reservation.Lastname,
			&i.Reservation.Email,
			&i.Reservation.ReservationDatetime,
			&i.DepartureAirport,
			&i.ArrivalAirport,
			&i.DepartureDatetime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReservationByID = `-- name: GetReservationByID :one
SELECT reservations.reservation_id, reservations.flight_id, reservations.firstname, reservations.lastname, reservations.email, reservations.reservation_datetime, flights.flight_id, flights.departure_airport, flights.arrival_airport, flights.departure_datetime, flights.arrival_datetime, flights.airplane_id, flights.price
FROM reservations 
JOIN flights ON reservations.flight_id = flights.flight_id
WHERE reservation_id = $1::int
`

type GetReservationByIDRow struct {
	Reservation Reservation `json:"reservation"`
	Flight      Flight      `json:"flight"`
}

func (q *Queries) GetReservationByID(ctx context.Context, db DBTX, reservationID int32) (GetReservationByIDRow, error) {
	row := db.QueryRow(ctx, getReservationByID, reservationID)
	var i GetReservationByIDRow
	err := row.Scan(
		&i.Reservation.ReservationID,
		&i.Reservation.FlightID,
		&i.Reservation.Firstname,
		&i.Reservation.Lastname,
		&i.Reservation.Email,
		&i.Reservation.ReservationDatetime,
		&i.Flight.FlightID,
		&i.Flight.DepartureAirport,
		&i.Flight.ArrivalAirport,
		&i.Flight.DepartureDatetime,
		&i.Flight.ArrivalDatetime,
		&i.Flight.AirplaneID,
		&i.Flight.Price,
	)
	return i, err
}

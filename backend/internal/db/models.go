// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Availability string

const (
	AvailabilityAvailable   Availability = "available"
	AvailabilityReserved    Availability = "reserved"
	AvailabilityUnavailable Availability = "unavailable"
)

func (e *Availability) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Availability(s)
	case string:
		*e = Availability(s)
	default:
		return fmt.Errorf("unsupported scan type for Availability: %T", src)
	}
	return nil
}

type NullAvailability struct {
	Availability Availability `json:"availability"`
	Valid        bool         `json:"valid"` // Valid is true if Availability is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAvailability) Scan(value interface{}) error {
	if value == nil {
		ns.Availability, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Availability.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAvailability) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Availability), nil
}

type ReservationStatus string

const (
	ReservationStatusPending   ReservationStatus = "pending"
	ReservationStatusConfirmed ReservationStatus = "confirmed"
	ReservationStatusCancelled ReservationStatus = "cancelled"
)

func (e *ReservationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ReservationStatus(s)
	case string:
		*e = ReservationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ReservationStatus: %T", src)
	}
	return nil
}

type NullReservationStatus struct {
	ReservationStatus ReservationStatus `json:"reservation_status"`
	Valid             bool              `json:"valid"` // Valid is true if ReservationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullReservationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ReservationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ReservationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullReservationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ReservationStatus), nil
}

type SeatClass string

const (
	SeatClassEconomy     SeatClass = "economy"
	SeatClassBusiness    SeatClass = "business"
	SeatClassFirstClass  SeatClass = "first_class"
	SeatClassEconomyPlus SeatClass = "economy_plus"
)

func (e *SeatClass) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SeatClass(s)
	case string:
		*e = SeatClass(s)
	default:
		return fmt.Errorf("unsupported scan type for SeatClass: %T", src)
	}
	return nil
}

type NullSeatClass struct {
	SeatClass SeatClass `json:"seat_class"`
	Valid     bool      `json:"valid"` // Valid is true if SeatClass is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSeatClass) Scan(value interface{}) error {
	if value == nil {
		ns.SeatClass, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SeatClass.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSeatClass) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SeatClass), nil
}

type Airplane struct {
	AirplaneID      int32           `json:"airplane_id"`
	AirplaneModel   string          `json:"airplane_model"`
	DiagramMetadata json.RawMessage `json:"diagram_metadata"`
}

type Airport struct {
	AirportCode string `json:"airport_code"`
	AirportName string `json:"airport_name"`
	City        string `json:"city"`
	Country     string `json:"country"`
}

type Flight struct {
	FlightID          int32            `json:"flight_id"`
	DepartureAirport  string           `json:"departure_airport"`
	ArrivalAirport    string           `json:"arrival_airport"`
	DepartureDatetime pgtype.Timestamp `json:"departure_datetime"`
	ArrivalDatetime   pgtype.Timestamp `json:"arrival_datetime"`
	AirplaneID        pgtype.Int4      `json:"airplane_id"`
	Price             pgtype.Numeric   `json:"price"`
}

type FlightSeat struct {
	ID           int32            `json:"id"`
	FlightID     pgtype.Int4      `json:"flight_id"`
	SeatID       pgtype.Int4      `json:"seat_id"`
	Availability NullAvailability `json:"availability"`
}

type Reservation struct {
	ReservationID       int32                 `json:"reservation_id"`
	FlightID            pgtype.Int4           `json:"flight_id"`
	Firstname           string                `json:"firstname"`
	Lastname            string                `json:"lastname"`
	Email               string                `json:"email"`
	ReservationDatetime pgtype.Timestamp      `json:"reservation_datetime"`
	Status              NullReservationStatus `json:"status"`
}

type ReservationSeat struct {
	ID            int32       `json:"id"`
	ReservationID pgtype.Int4 `json:"reservation_id"`
	SeatID        pgtype.Int4 `json:"seat_id"`
}

type Seat struct {
	SeatID     int32     `json:"seat_id"`
	AirplaneID int32     `json:"airplane_id"`
	SeatType   SeatClass `json:"seat_type"`
	Row        int32     `json:"row"`
	Col        int32     `json:"col"`
}

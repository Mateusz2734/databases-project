// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: airports.sql

package db

import (
	"context"
)

const getAirports = `-- name: GetAirports :many
SELECT airport_code, airport_name, city, country FROM airports
`

func (q *Queries) GetAirports(ctx context.Context) ([]Airport, error) {
	rows, err := q.db.Query(ctx, getAirports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Airport
	for rows.Next() {
		var i Airport
		if err := rows.Scan(
			&i.AirportCode,
			&i.AirportName,
			&i.City,
			&i.Country,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAirportsWithFilters = `-- name: GetAirportsWithFilters :many
SELECT airport_code, airport_name, city, country FROM airports WHERE true 
    AND (city = $1 OR NOT $2::boolean)
    AND (country = $3 OR NOT $4::boolean)
`

type GetAirportsWithFiltersParams struct {
	City            string `json:"city"`
	FilterByCity    bool   `json:"filter_by_city"`
	Country         string `json:"country"`
	FilterByCountry bool   `json:"filter_by_country"`
}

func (q *Queries) GetAirportsWithFilters(ctx context.Context, arg GetAirportsWithFiltersParams) ([]Airport, error) {
	rows, err := q.db.Query(ctx, getAirportsWithFilters,
		arg.City,
		arg.FilterByCity,
		arg.Country,
		arg.FilterByCountry,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Airport
	for rows.Next() {
		var i Airport
		if err := rows.Scan(
			&i.AirportCode,
			&i.AirportName,
			&i.City,
			&i.Country,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCities = `-- name: GetCities :many
SELECT DISTINCT city FROM airports
`

func (q *Queries) GetCities(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getCities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var city string
		if err := rows.Scan(&city); err != nil {
			return nil, err
		}
		items = append(items, city)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountries = `-- name: GetCountries :many
SELECT DISTINCT country FROM airports
`

func (q *Queries) GetCountries(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getCountries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var country string
		if err := rows.Scan(&country); err != nil {
			return nil, err
		}
		items = append(items, country)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

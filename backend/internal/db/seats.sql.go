// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: seats.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getReservedSeatsForFlight = `-- name: GetReservedSeatsForFlight :many
SELECT seats.seat_id, seats.airplane_id, seats.seat_type, seats.row, seats."column" FROM seats
JOIN flight_seats ON seats.seat_id = flight_seats.seat_id
WHERE flight_seats.flight_id = $1
AND flight_seats.availability IN ('reserved', 'unavailable')
`

func (q *Queries) GetReservedSeatsForFlight(ctx context.Context, flightID pgtype.Int4) ([]Seat, error) {
	rows, err := q.db.Query(ctx, getReservedSeatsForFlight, flightID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Seat
	for rows.Next() {
		var i Seat
		if err := rows.Scan(
			&i.SeatID,
			&i.AirplaneID,
			&i.SeatType,
			&i.Row,
			&i.Column,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
